cmake_minimum_required(VERSION 3.8)

project(icu LANGUAGES C CXX VERSION 58.2)
if(NOT ((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "e2k")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")))
    message(FATAL_ERROR "Current toolchain is not supported by this project [ ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_SIZEOF_VOID_P} ${CMAKE_C_COMPILER_ID} ${CMAKE_CXX_COMPILER_ID} ]")
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    enable_language(RC)
endif()

include(cmake_framework)
include(compiler_config)
include(system)
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    include(set_target_output_subdir)
endif()
fix_asm_flags()
find_thread_library()

set(ICU_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "")
# Bump minimal supported Windows version to Vista
set_minimal_supported_windows_version(0x06000100)

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    add_compile_options(
        -DU_ATTRIBUTE_DEPRECATED=
        -DU_HAVE_ATOMIC=1
        -DU_HAVE_STRTOD_L=1
        -fno-common
    )
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    add_compile_options(
        -ffunction-sections
        -fdata-sections
        -DU_HAVE_ELF_H=1
        -DU_HAVE_ATOMIC=1
        -DU_HAVE_TIMEZONE=0
        -DU_HAVE_STRTOD_L=1
        -DU_ATTRIBUTE_DEPRECATED=
    )
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "e2k")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    add_compile_options(
        -ffunction-sections
        -fdata-sections
        -DU_HAVE_ELF_H=1
        -DU_HAVE_ATOMIC=1
        -DU_HAVE_STRTOD_L=1
        -DU_ATTRIBUTE_DEPRECATED=
    )
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set(compile_flags_1
        -DUNISTR_FROM_CHAR_EXPLICIT=explicit
        -DUNISTR_FROM_STRING_EXPLICIT=explicit
        -DU_TOOLUTIL_IMPLEMENTATION
    )
    add_compile_options(
        -DHAVE_DLOPEN=0
        -DU_HAVE_ATOMIC=1
        -DU_HAVE_MMAP=0
        -DU_HAVE_DIRENT_H=0
        -DU_HAVE_POPEN=0
        -DU_HAVE_TZNAME=0
        -DU_HAVE_STRTOD_L=0
    )
endif()
include_directories(${ICU_SOURCE_DIR}/common)
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    language_compile_options(CXX -fvisibility=hidden)
    add_link_options(-Wl,-headerpad_max_install_names)
    link_libraries(Threads::Threads m)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    language_compile_options(C -DU_ATTRIBUTE_DEPRECATED= -DCYGWINMSVC /GL- -GF)
    language_compile_options(CXX -DU_ATTRIBUTE_DEPRECATED= -DCYGWINMSVC /GL- -GF -Zc:wchar_t)
endif()
set(ICU_BUILD_OPTIONS_FILE ${CMAKE_CURRENT_BINARY_DIR}/data/icupkg.inc CACHE STRING "")

find_program(ICU_ICUPKG icupkg)
if(NOT ICU_ICUPKG)
    message(FATAL_ERROR "icupkg not found")
endif()

add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    COMMAND
        ${CMAKE_COMMAND} -E env
        ${ICU_ICUPKG} -d ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l --list -x * ${ICU_SOURCE_DIR}/data/in/icudt58l.dat -o ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    DEPENDS
        ${ICU_SOURCE_DIR}/data/in/icudt58l.dat
    VERBATIM
)
add_custom_target(data_out_tmp_icudata_lst DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    add_library(data_out_tmp_icudata_o OBJECT ${ICU_SOURCE_DIR}/data/misc/icudata.rc)
    target_include_directories(data_out_tmp_icudata_o PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/common)
endif()

find_program(ICU_PKGDATA pkgdata)
if(NOT ICU_PKGDATA)
    message(FATAL_ERROR "pkgdata not found")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.2.dylib
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${ICU_PKGDATA} -O ${ICU_BUILD_OPTIONS_FILE} -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/lib -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -m dll -r 58.2 -L icudata ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        DEPENDS
            ${ICU_BUILD_OPTIONS_FILE}
            ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        VERBATIM
    )
    add_custom_target(lib_icudata.58.2 DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.2.dylib)

    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.dylib
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${CMAKE_COMMAND} -E create_symlink libicudata.58.2.dylib ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.dylib
        DEPENDS
            ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.2.dylib
        VERBATIM
    )
    add_custom_target(lib_icudata.58 DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.dylib)

    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.dylib
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${CMAKE_COMMAND} -E create_symlink libicudata.58.2.dylib ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.dylib
        DEPENDS
            ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.58.2.dylib
        VERBATIM
    )
    add_custom_target(lib_icudata DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.dylib)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/icudt58.dll
        ${CMAKE_CURRENT_BINARY_DIR}/lib/icudt.lib
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${CMAKE_COMMAND} -E copy_if_different "$<TARGET_OBJECTS:data_out_tmp_icudata_o>" "${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.res"
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${ICU_PKGDATA} -O ${ICU_BUILD_OPTIONS_FILE} -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/lib -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -m dll -r 58 -L icudt ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        DEPENDS
            ${ICU_BUILD_OPTIONS_FILE}
            ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
            data_out_tmp_icudata_o
        VERBATIM
    )
    add_custom_target(lib_icudata.58.2 DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/icudt58.dll
        ${CMAKE_CURRENT_BINARY_DIR}/lib/icudt.lib)
endif()

if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    add_library(stubdata_icudata.58.2 ${ICU_SOURCE_DIR}/stubdata/stubdata.c)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    set_target_properties(stubdata_icudata.58.2 PROPERTIES LINK_FLAGS "-install_name @loader_path/libicudata.58.dylib")
    set_target_properties(stubdata_icudata.58.2 PROPERTIES OUTPUT_NAME icudata)
    set_target_output_subdir(stubdata_icudata.58.2 LIBRARY_OUTPUT_DIRECTORY stubdata)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set_target_properties(stubdata_icudata.58.2 PROPERTIES LINK_FLAGS "-NOENTRY")
    set_target_properties(stubdata_icudata.58.2 PROPERTIES OUTPUT_NAME icudt58)
    set_target_properties(stubdata_icudata.58.2 PROPERTIES ARCHIVE_OUTPUT_NAME icudt)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_output_subdir(stubdata_icudata.58.2 RUNTIME_OUTPUT_DIRECTORY stubdata)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set_target_output_subdir(stubdata_icudata.58.2 ARCHIVE_OUTPUT_DIRECTORY stubdata)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_properties(stubdata_icudata.58.2 PROPERTIES VERSION 58.2)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    set_target_properties(stubdata_icudata.58.2 PROPERTIES SOVERSION 58)

    add_library(stubdata_icudata ALIAS stubdata_icudata.58.2)

    add_library(icuuc.58.2
        ${ICU_SOURCE_DIR}/common/ucnv.c
        ${ICU_SOURCE_DIR}/common/resbund.cpp
        ${ICU_SOURCE_DIR}/common/unistr_case_locale.cpp
        ${ICU_SOURCE_DIR}/common/uniset.cpp
    )
    set_target_properties(icuuc.58.2 PROPERTIES LINK_FLAGS "-install_name @loader_path/libicuuc.58.dylib")
    target_link_libraries(icuuc.58.2 PRIVATE stubdata_icudata.58.2)
    target_compile_options(icuuc.58.2 PRIVATE -DU_COMMON_IMPLEMENTATION)
    target_language_compile_options(icuuc.58.2 C PRIVATE -fvisibility=hidden)
    set_target_properties(icuuc.58.2 PROPERTIES OUTPUT_NAME icuuc)
    set_target_output_subdir(icuuc.58.2 LIBRARY_OUTPUT_DIRECTORY lib)
    set_target_output_subdir(icuuc.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
    set_target_properties(icuuc.58.2 PROPERTIES VERSION 58.2)
    set_target_properties(icuuc.58.2 PROPERTIES SOVERSION 58)

    add_library(icuuc ALIAS icuuc.58.2)

    add_library(icui18n.58.2
        ${ICU_SOURCE_DIR}/i18n/ucln_in.cpp
        ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
        ${ICU_SOURCE_DIR}/i18n/decContext.c
        ${ICU_SOURCE_DIR}/i18n/decimfmtimpl.cpp
    )
    set_target_properties(icui18n.58.2 PROPERTIES LINK_FLAGS "-install_name @loader_path/libicui18n.58.dylib")
    target_link_libraries(icui18n.58.2 PRIVATE icuuc.58.2 stubdata_icudata.58.2)
    target_compile_options(icui18n.58.2 PRIVATE -DU_I18N_IMPLEMENTATION)
    target_include_directories(icui18n.58.2 PRIVATE ${ICU_SOURCE_DIR}/i18n)
    target_language_compile_options(icui18n.58.2 C PRIVATE -fvisibility=hidden)
    set_target_properties(icui18n.58.2 PROPERTIES OUTPUT_NAME icui18n)
    set_target_output_subdir(icui18n.58.2 LIBRARY_OUTPUT_DIRECTORY lib)
    set_target_output_subdir(icui18n.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
    set_target_properties(icui18n.58.2 PROPERTIES VERSION 58.2)
    set_target_properties(icui18n.58.2 PROPERTIES SOVERSION 58)

    add_library(icui18n.58 ALIAS icui18n.58.2)

    add_library(icui18n ALIAS icui18n.58.2)

    add_library(icuio.58.2
        ${ICU_SOURCE_DIR}/io/locbund.cpp
        ${ICU_SOURCE_DIR}/io/ufile.c
        ${ICU_SOURCE_DIR}/io/ucln_io.cpp
    )
    set_target_properties(icuio.58.2 PROPERTIES LINK_FLAGS "-install_name @loader_path/libicuio.58.dylib")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    add_library(icuuc.58.2
        ${ICU_SOURCE_DIR}/common/ucnv.c
        ${ICU_SOURCE_DIR}/common/resbund.cpp
        ${ICU_SOURCE_DIR}/common/unistr_case_locale.cpp
        ${ICU_SOURCE_DIR}/common/uniset.cpp
        ${ICU_SOURCE_DIR}/common/common.rc
    )
    target_link_libraries(icuuc.58.2 PRIVATE stubdata_icudata.58.2)
    target_language_compile_options(icuuc.58.2 C PRIVATE -DU_COMMON_IMPLEMENTATION)
    target_language_compile_options(icuuc.58.2 CXX PRIVATE -DU_COMMON_IMPLEMENTATION)
    set_target_properties(icuuc.58.2 PROPERTIES OUTPUT_NAME icuuc58)
    set_target_properties(icuuc.58.2 PROPERTIES ARCHIVE_OUTPUT_NAME icuuc)
    set_target_output_subdir(icuuc.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
    set_target_output_subdir(icuuc.58.2 ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icuuc.58.2 PROPERTIES VERSION 58.2)

    add_library(icui18n.58.2
        ${ICU_SOURCE_DIR}/i18n/ucln_in.cpp
        ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
        ${ICU_SOURCE_DIR}/i18n/decContext.c
        ${ICU_SOURCE_DIR}/i18n/i18n.rc
    )
    target_link_libraries(icui18n.58.2 PRIVATE icuuc.58.2 stubdata_icudata.58.2)
    target_include_directories(icui18n.58.2 PRIVATE ${ICU_SOURCE_DIR}/i18n)
    target_language_compile_options(icui18n.58.2 C PRIVATE -DU_I18N_IMPLEMENTATION)
    target_language_compile_options(icui18n.58.2 CXX PRIVATE -DU_I18N_IMPLEMENTATION)
    set_target_properties(icui18n.58.2 PROPERTIES OUTPUT_NAME icuin58)
    set_target_properties(icui18n.58.2 PROPERTIES ARCHIVE_OUTPUT_NAME icuin)
    set_target_output_subdir(icui18n.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
    set_target_output_subdir(icui18n.58.2 ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icui18n.58.2 PROPERTIES VERSION 58.2)

    add_library(icuio.58.2
        ${ICU_SOURCE_DIR}/io/locbund.cpp
        ${ICU_SOURCE_DIR}/io/ufile.c
        ${ICU_SOURCE_DIR}/io/ucln_io.cpp
        ${ICU_SOURCE_DIR}/io/io.rc
    )
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    target_link_libraries(icuio.58.2 PRIVATE icuuc.58.2 stubdata_icudata.58.2 icui18n.58.2)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    target_compile_options(icuio.58.2 PRIVATE -DU_IO_IMPLEMENTATION)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    target_include_directories(icuio.58.2 PRIVATE ${ICU_SOURCE_DIR}/i18n)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    target_language_compile_options(icuio.58.2 C PRIVATE -fvisibility=hidden)
    set_target_properties(icuio.58.2 PROPERTIES OUTPUT_NAME icuio)
    set_target_output_subdir(icuio.58.2 LIBRARY_OUTPUT_DIRECTORY lib)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    target_language_compile_options(icuio.58.2 C PRIVATE -DU_IO_IMPLEMENTATION)
    target_language_compile_options(icuio.58.2 CXX PRIVATE -DU_IO_IMPLEMENTATION)
    set_target_properties(icuio.58.2 PROPERTIES OUTPUT_NAME icuio58)
    set_target_properties(icuio.58.2 PROPERTIES ARCHIVE_OUTPUT_NAME icuio)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_output_subdir(icuio.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set_target_output_subdir(icuio.58.2 ARCHIVE_OUTPUT_DIRECTORY lib)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_properties(icuio.58.2 PROPERTIES VERSION 58.2)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    set_target_properties(icuio.58.2 PROPERTIES SOVERSION 58)

    add_library(icuio.58 ALIAS icuio.58.2)

    add_library(icuio ALIAS icuio.58.2)
endif()

if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    add_library(icutu.58.2
        ${ICU_SOURCE_DIR}/tools/toolutil/filestrm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucln_tu.cpp
    )
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    set_target_properties(icutu.58.2 PROPERTIES LINK_FLAGS "-install_name @loader_path/libicutu.58.dylib")
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    target_link_libraries(icutu.58.2 PRIVATE icui18n.58.2 icuuc.58.2 stubdata_icudata.58.2)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    target_compile_options(icutu.58.2 PRIVATE
        -DU_TOOLUTIL_IMPLEMENTATION
        -DUNISTR_FROM_CHAR_EXPLICIT=explicit
        -DUNISTR_FROM_STRING_EXPLICIT=explicit
    )
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    target_compile_options(icutu.58.2 PRIVATE ${compile_flags_1})
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    target_include_directories(icutu.58.2 PRIVATE ${ICU_SOURCE_DIR}/i18n)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    target_language_compile_options(icutu.58.2 C PRIVATE -fvisibility=hidden)
    set_target_properties(icutu.58.2 PROPERTIES OUTPUT_NAME icutu)
    set_target_output_subdir(icutu.58.2 LIBRARY_OUTPUT_DIRECTORY lib)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set_target_properties(icutu.58.2 PROPERTIES OUTPUT_NAME icutu58)
    set_target_properties(icutu.58.2 PROPERTIES ARCHIVE_OUTPUT_NAME icutu)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_output_subdir(icutu.58.2 RUNTIME_OUTPUT_DIRECTORY lib)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    set_target_output_subdir(icutu.58.2 ARCHIVE_OUTPUT_DIRECTORY lib)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    set_target_properties(icutu.58.2 PROPERTIES VERSION 58.2)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    set_target_properties(icutu.58.2 PROPERTIES SOVERSION 58)

    add_library(icutu.58 ALIAS icutu.58.2)

    add_library(icutu ALIAS icutu.58.2)

    add_library(icuuc.58 ALIAS icuuc.58.2)

    add_library(stubdata_icudata.58 ALIAS stubdata_icudata.58.2)
endif()
if((CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "e2k")
    OR (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.a
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${ICU_PKGDATA} -O ${ICU_BUILD_OPTIONS_FILE} -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/lib -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -m static -r 58.2 -L icudata ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        DEPENDS
            ${ICU_BUILD_OPTIONS_FILE}
            ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        VERBATIM
    )
    add_custom_target(icudata.static DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/libicudata.a)

    add_library(icui18n.static
        ${ICU_SOURCE_DIR}/i18n/ucln_in.cpp
        ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
        ${ICU_SOURCE_DIR}/i18n/decContext.c
        ${ICU_SOURCE_DIR}/i18n/decimfmtimpl.cpp
    )
    target_compile_options(icui18n.static PRIVATE -DU_I18N_IMPLEMENTATION)
    target_include_directories(icui18n.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icui18n.static PROPERTIES OUTPUT_NAME icui18n)

    add_library(icuio.static
        ${ICU_SOURCE_DIR}/io/locbund.cpp
        ${ICU_SOURCE_DIR}/io/ufile.c
        ${ICU_SOURCE_DIR}/io/ucln_io.cpp
    )
    target_compile_options(icuio.static PRIVATE -DU_IO_IMPLEMENTATION)
    target_include_directories(icuio.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icuio.static PROPERTIES OUTPUT_NAME icuio)

    add_library(icutu.static
        ${ICU_SOURCE_DIR}/tools/toolutil/filestrm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucln_tu.cpp
    )
    target_compile_options(icutu.static PRIVATE
        -DUNISTR_FROM_CHAR_EXPLICIT=explicit
        -DUNISTR_FROM_STRING_EXPLICIT=explicit
        -DU_TOOLUTIL_IMPLEMENTATION
    )
    target_include_directories(icutu.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icutu.static PROPERTIES OUTPUT_NAME icutu)

    add_library(icuuc.static
        ${ICU_SOURCE_DIR}/common/ucnv.c
        ${ICU_SOURCE_DIR}/common/resbund.cpp
        ${ICU_SOURCE_DIR}/common/unistr_case_locale.cpp
        ${ICU_SOURCE_DIR}/common/uniset.cpp
    )
    target_compile_options(icuuc.static PRIVATE -DU_COMMON_IMPLEMENTATION)
    set_target_properties(icuuc.static PROPERTIES OUTPUT_NAME icuuc)

    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/data/out/icudt58l.dat
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${ICU_PKGDATA} -O ${ICU_BUILD_OPTIONS_FILE} -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/data/out -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -m common -r 58.2 ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        DEPENDS
            ${ICU_BUILD_OPTIONS_FILE}
            ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        VERBATIM
    )
    add_custom_target(data_out_icudata58l_dat DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/data/out/icudt58l.dat)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/sicudt.lib
        COMMAND
            ${CMAKE_COMMAND} -E env
            ${ICU_PKGDATA} -O ${ICU_BUILD_OPTIONS_FILE} -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/lib -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -L sicudt -m static -r 58 ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        DEPENDS
            ${ICU_BUILD_OPTIONS_FILE}
            ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
        VERBATIM
    )
    add_custom_target(icudata.static DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/sicudt.lib)

    add_library(icui18n.static
        ${ICU_SOURCE_DIR}/i18n/ucln_in.cpp
        ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
        ${ICU_SOURCE_DIR}/i18n/decContext.c
    )
    target_compile_options(icui18n.static PRIVATE -DU_I18N_IMPLEMENTATION -DU_STATIC_IMPLEMENTATION)
    target_include_directories(icui18n.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icui18n.static PROPERTIES OUTPUT_NAME sicuin)
    set_target_output_subdir(icui18n.static ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icui18n.static PROPERTIES VERSION 58.2)

    add_library(icuio.static
        ${ICU_SOURCE_DIR}/io/locbund.cpp
        ${ICU_SOURCE_DIR}/io/ufile.c
        ${ICU_SOURCE_DIR}/io/ucln_io.cpp
    )
    target_compile_options(icuio.static PRIVATE -DU_IO_IMPLEMENTATION -DU_STATIC_IMPLEMENTATION)
    target_include_directories(icuio.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icuio.static PROPERTIES OUTPUT_NAME sicuio)
    set_target_output_subdir(icuio.static ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icuio.static PROPERTIES VERSION 58.2)

    add_library(icutu.static
        ${ICU_SOURCE_DIR}/tools/toolutil/filestrm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucm.c
        ${ICU_SOURCE_DIR}/tools/toolutil/ucln_tu.cpp
    )
    target_compile_options(icutu.static PRIVATE ${compile_flags_1} -DU_STATIC_IMPLEMENTATION)
    target_include_directories(icutu.static PRIVATE ${ICU_SOURCE_DIR}/i18n)
    set_target_properties(icutu.static PROPERTIES OUTPUT_NAME sicutu)
    set_target_output_subdir(icutu.static ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icutu.static PROPERTIES VERSION 58.2)

    add_library(icuuc.static
        ${ICU_SOURCE_DIR}/common/ucnv.c
        ${ICU_SOURCE_DIR}/common/resbund.cpp
        ${ICU_SOURCE_DIR}/common/unistr_case_locale.cpp
        ${ICU_SOURCE_DIR}/common/uniset.cpp
    )
    target_compile_options(icuuc.static PRIVATE -DU_COMMON_IMPLEMENTATION -DU_STATIC_IMPLEMENTATION)
    set_target_properties(icuuc.static PROPERTIES OUTPUT_NAME sicuuc)
    set_target_output_subdir(icuuc.static ARCHIVE_OUTPUT_DIRECTORY lib)
    set_target_properties(icuuc.static PROPERTIES VERSION 58.2)
endif()

# CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "i686" AND CMAKE_SIZEOF_VOID_P EQUAL 4
cmake_minimum_required(VERSION 3.8)

project(libpng LANGUAGES C VERSION 1.6.34)

include(cmake_framework)
include(compiler_config)
include(system)
fix_asm_flags()
find_thread_library()

set(LIBPNG_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "")
set(LIBPNG_ZLIB_TARGET
    ${CMAKE_CURRENT_BINARY_DIR}/../.deps_i686/externals/zlib/1.2.11/generated/zlib_package/lib/libz.so
    CACHE STRING ""
)
set(LIBPNG_ZLIB_INCLUDE_DIR
    ${CMAKE_CURRENT_BINARY_DIR}/../.deps_i686/externals/zlib/1.2.11/generated/zlib_package/include
    CACHE STRING ""
)
add_compile_options(-DHAVE_CONFIG_H)
include_directories(
    ${CMAKE_CURRENT_BINARY_DIR}
    ${LIBPNG_SOURCE_DIR}
    ${LIBPNG_ZLIB_INCLUDE_DIR}
)

set(copy_prebuilt_artifacts_DIR i686-pc-freebsd/prebuilt)
set(copy_prebuilt_artifacts_DEST ${CMAKE_CURRENT_BINARY_DIR})
file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_LIST_DIR}/${copy_prebuilt_artifacts_DIR} ${copy_prebuilt_artifacts_DIR}/*)
foreach(_f ${_files})
    configure_file(${copy_prebuilt_artifacts_DIR}/${_f} ${copy_prebuilt_artifacts_DEST}/${_f} COPYONLY)
endforeach()

add_library(png16
    ${LIBPNG_SOURCE_DIR}/png.c
    ${LIBPNG_SOURCE_DIR}/pngerror.c
    ${LIBPNG_SOURCE_DIR}/pngget.c
    ${LIBPNG_SOURCE_DIR}/pngmem.c
    ${LIBPNG_SOURCE_DIR}/pngpread.c
    ${LIBPNG_SOURCE_DIR}/pngread.c
    ${LIBPNG_SOURCE_DIR}/pngrio.c
    ${LIBPNG_SOURCE_DIR}/pngrtran.c
    ${LIBPNG_SOURCE_DIR}/pngrutil.c
    ${LIBPNG_SOURCE_DIR}/pngset.c
    ${LIBPNG_SOURCE_DIR}/pngtrans.c
    ${LIBPNG_SOURCE_DIR}/pngwio.c
    ${LIBPNG_SOURCE_DIR}/pngwrite.c
    ${LIBPNG_SOURCE_DIR}/pngwtran.c
    ${LIBPNG_SOURCE_DIR}/pngwutil.c
    ${LIBPNG_SOURCE_DIR}/mips/mips_init.c
    ${LIBPNG_SOURCE_DIR}/mips/filter_msa_intrinsics.c
    ${LIBPNG_SOURCE_DIR}/intel/intel_init.c
    ${LIBPNG_SOURCE_DIR}/intel/filter_sse2_intrinsics.c
    ${LIBPNG_SOURCE_DIR}/powerpc/powerpc_init.c
    ${LIBPNG_SOURCE_DIR}/powerpc/filter_vsx_intrinsics.c
)
set_target_properties(png16 PROPERTIES LINK_FLAGS
    "-Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/libpng.vers"
)
target_link_libraries(png16 PRIVATE ${LIBPNG_ZLIB_TARGET} m)
target_compile_options(png16 PRIVATE -fPIC -DPIC)
set_target_properties(png16 PROPERTIES SOVERSION 16)

add_library(png16.static
    ${LIBPNG_SOURCE_DIR}/png.c
    ${LIBPNG_SOURCE_DIR}/pngerror.c
    ${LIBPNG_SOURCE_DIR}/pngget.c
    ${LIBPNG_SOURCE_DIR}/pngmem.c
    ${LIBPNG_SOURCE_DIR}/pngpread.c
    ${LIBPNG_SOURCE_DIR}/pngread.c
    ${LIBPNG_SOURCE_DIR}/pngrio.c
    ${LIBPNG_SOURCE_DIR}/pngrtran.c
    ${LIBPNG_SOURCE_DIR}/pngrutil.c
    ${LIBPNG_SOURCE_DIR}/pngset.c
    ${LIBPNG_SOURCE_DIR}/pngtrans.c
    ${LIBPNG_SOURCE_DIR}/pngwio.c
    ${LIBPNG_SOURCE_DIR}/pngwrite.c
    ${LIBPNG_SOURCE_DIR}/pngwtran.c
    ${LIBPNG_SOURCE_DIR}/pngwutil.c
    ${LIBPNG_SOURCE_DIR}/mips/mips_init.c
    ${LIBPNG_SOURCE_DIR}/mips/filter_msa_intrinsics.c
    ${LIBPNG_SOURCE_DIR}/intel/intel_init.c
    ${LIBPNG_SOURCE_DIR}/intel/filter_sse2_intrinsics.c
    ${LIBPNG_SOURCE_DIR}/powerpc/powerpc_init.c
    ${LIBPNG_SOURCE_DIR}/powerpc/filter_vsx_intrinsics.c
)
set_target_properties(png16.static PROPERTIES OUTPUT_NAME png16)

# Footer

set(OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/libpng_package)
file(MAKE_DIRECTORY ${OUTPUT_DIRECTORY})

if(NOT DEFINED ARCHIVE_OUTPUT_DIRECTORY)
    set(ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif()

set(LIBPNG_LIBS png16.static)
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(LIBPNG_LIBS
        ${LIBPNG_LIBS}
        png16
    )

    if(APPLE)
        set_target_properties(png16 PROPERTIES SOVERSION 16)
    else()
        set_target_properties(png16 PROPERTIES VERSION 16.34)
    endif()
    set(LIBPNG_CONFIG ${CMAKE_CURRENT_BINARY_DIR}/libpng16-config)
endif()

add_custom_target(external.libpng.build)

foreach(lib ${LIBPNG_LIBS})
    add_dependencies(${lib} external.zlib.build)
endforeach()

if(LIBPNG_CONFIG)
    install(FILES ${LIBPNG_CONFIG} DESTINATION bin)
endif()
install(TARGETS ${LIBPNG_LIBS} DESTINATION lib)

set(LIBPNG_SOURCE_HEADERS
    png.h
    pngconf.h
)
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(HEADERS_DESTINATION ./include)
    set(LIBPNG_SOURCE_HEADERS
        ${LIBPNG_SOURCE_HEADERS}
        pngdebug.h
        pnginfo.h
        pngpriv.h
        pngstruct.h
    )

    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/gregbook/readpng.h DESTINATION ./include/contrib/gregbook)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/gregbook/readpng2.h DESTINATION ./include/contrib/gregbook)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/gregbook/writepng.h DESTINATION ./include/contrib/gregbook)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/libtests/pngstest-errors.h DESTINATION ./include/contrib/libtests)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/pngminim/decoder/pngusr.h DESTINATION ./include/contrib/pngminim/decoder)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/pngminim/encoder/pngusr.h DESTINATION ./include/contrib/pngminim/encoder)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/pngminim/preader/pngusr.h DESTINATION ./include/contrib/pngminim/preader)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/tools/sRGB.h DESTINATION ./include/contrib/tools)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/visupng/cexcept.h DESTINATION ./include/contrib/visupng)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/visupng/PngFile.h DESTINATION ./include/contrib/visupng)
    install(FILES ${LIBPNG_SOURCE_DIR}/contrib/visupng/resource.h DESTINATION ./include/contrib/visupng)
else()
    set(HEADERS_DESTINATION ./include/libpng16)
endif()

foreach(header ${LIBPNG_SOURCE_HEADERS})
    install(FILES ${LIBPNG_SOURCE_DIR}/${header} DESTINATION ${HEADERS_DESTINATION})
endforeach()
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h DESTINATION ${HEADERS_DESTINATION})
install(FILES ${LIBPNG_SOURCE_DIR}/../file_list.cmake DESTINATION .)

add_custom_target(external.libpng.install
    ${CMAKE_COMMAND} -DCMAKE_INSTALL_PREFIX=${OUTPUT_DIRECTORY} -DBUILD_TYPE=$<CONFIG> -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_install.cmake
)

include(utils)
add_tarball_target(libpng ${OUTPUT_DIRECTORY} ${ARCHIVE_OUTPUT_DIRECTORY})

add_dependencies(external.libpng.install ${LIBPNG_LIBS} ${LIBPNG_EXE})

add_dependencies(external.libpng.build external.libpng.install)
add_dependencies(external.libpng.tarball external.libpng.build)

include(add_package_targets)
add_package_targets(
    PACKAGE_INSTALLER ${LIBPNG_SOURCE_DIR}/../file_list.cmake
    INSTALL_DIR ${OUTPUT_DIRECTORY}
    DEPENDENCIES external.libpng.build
)
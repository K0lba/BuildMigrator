# CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND FDE
cmake_minimum_required(VERSION 3.8)

project(icu LANGUAGES C CXX VERSION 58.2)

include(cmake_framework)
include(compiler_config)
include(system)
include(set_target_output_subdir)
fix_asm_flags()
find_thread_library()

set(ICU_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "")
add_compile_options(
    -DUCONFIG_NO_CONVERSION=1
    -DHAVE_DLOPEN=0
    -DU_HAVE_ATOMIC=1
    -DU_HAVE_MMAP=0
    -DU_HAVE_DIRENT_H=0
    -DU_HAVE_POPEN=0
    -DU_HAVE_TZNAME=0
    -DU_HAVE_STRTOD_L=0
    -DU_HAVE_WCSCPY=0
    -DU_STATIC_IMPLEMENTATION
    -DU_ATTRIBUTE_DEPRECATED=
    -DCYGWINMSVC
    -Z7
    -GL
    -Gy
    -d2notypeopt
    -Gw
    -GL-
    -MT
    -GF
)
include_directories(${ICU_SOURCE_DIR}/common)
language_compile_options(CXX /GR -Zc:wchar_t)

set(copy_prebuilt_artifacts_DIR windows_x86_64_for_fde/prebuilt)
set(copy_prebuilt_artifacts_DEST ${CMAKE_CURRENT_BINARY_DIR})
file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_LIST_DIR}/${copy_prebuilt_artifacts_DIR} ${copy_prebuilt_artifacts_DIR}/*)
foreach(_f ${_files})
    configure_file(${copy_prebuilt_artifacts_DIR}/${_f} ${copy_prebuilt_artifacts_DEST}/${_f} COPYONLY)
endforeach()

find_program(ICU_ICUPKG icupkg)
if(NOT ICU_ICUPKG)
    message(FATAL_ERROR "icupkg not found")
endif()

add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    COMMAND
        ${CMAKE_COMMAND} -E env
        ${ICU_ICUPKG} -d ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l --list -x * ${ICU_SOURCE_DIR}/data/in/icudt58l.dat -o ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    VERBATIM
)
add_custom_target(data_out_tmp_icudata_lst.fde DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst)

find_program(ICU_PKGDATA pkgdata)
if(NOT ICU_PKGDATA)
    message(FATAL_ERROR "pkgdata not found")
endif()

add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/sicudt.lib
    COMMAND
        ${CMAKE_COMMAND} -E env
        ${ICU_PKGDATA} -O ${CMAKE_CURRENT_BINARY_DIR}/data/icupkg.inc -q -c -s ${CMAKE_CURRENT_BINARY_DIR}/data/out/build/icudt58l -d ${CMAKE_CURRENT_BINARY_DIR}/lib -e icudt58 -T ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp -p icudt58l -m static -r 58 -L icudt ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    DEPENDS
        ${CMAKE_CURRENT_BINARY_DIR}/data/out/tmp/icudata.lst
    VERBATIM
)
add_custom_target(icudata.static.fde DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/lib/sicudt.lib)

add_library(icui18n.static.fde
    ${ICU_SOURCE_DIR}/i18n/ucln_in.cpp
    ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
    ${ICU_SOURCE_DIR}/i18n/decContext.c
    ${ICU_SOURCE_DIR}/i18n/decimfmt.cpp
)
target_compile_options(icui18n.static.fde PRIVATE -DU_I18N_IMPLEMENTATION)
target_include_directories(icui18n.static.fde PRIVATE ${ICU_SOURCE_DIR}/i18n)
set_target_properties(icui18n.static.fde PROPERTIES OUTPUT_NAME sicuin)
set_target_output_subdir(icui18n.static.fde ARCHIVE_OUTPUT_DIRECTORY lib)
set_target_properties(icui18n.static.fde PROPERTIES VERSION 58.2)

add_library(icuio.static.fde
    ${ICU_SOURCE_DIR}/io/locbund.cpp
    ${ICU_SOURCE_DIR}/io/ufile.c
    ${ICU_SOURCE_DIR}/io/ucln_io.cpp
)
target_compile_options(icuio.static.fde PRIVATE -DU_IO_IMPLEMENTATION)
target_include_directories(icuio.static.fde PRIVATE ${ICU_SOURCE_DIR}/i18n)
set_target_properties(icuio.static.fde PROPERTIES OUTPUT_NAME sicuio)
set_target_output_subdir(icuio.static.fde ARCHIVE_OUTPUT_DIRECTORY lib)
set_target_properties(icuio.static.fde PROPERTIES VERSION 58.2)

add_library(icuuc.static.fde
    ${ICU_SOURCE_DIR}/common/ucnv.c
    ${ICU_SOURCE_DIR}/common/resbund.cpp
    ${ICU_SOURCE_DIR}/common/unistr_case_locale.cpp
    ${ICU_SOURCE_DIR}/common/uniset.cpp
)
target_compile_options(icuuc.static.fde PRIVATE -DU_COMMON_IMPLEMENTATION)
set_target_properties(icuuc.static.fde PROPERTIES OUTPUT_NAME sicuuc)
set_target_output_subdir(icuuc.static.fde ARCHIVE_OUTPUT_DIRECTORY lib)
set_target_properties(icuuc.static.fde PROPERTIES VERSION 58.2)

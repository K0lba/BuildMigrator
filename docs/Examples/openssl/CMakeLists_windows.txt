cmake_minimum_required(VERSION 3.13)

project(PROJECT C)
enable_language(ASM_NASM)
enable_language(RC)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})
include(extensions)

set(SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/source" CACHE PATH "")
set(CMAKE_ASM_NASM_OBJECT_FORMAT win64)
set(compile_flags_1
    -DAESNI_ASM
    -DECP_NISTZ256_ASM
    "-DENGINESDIR=\"C:\\\\Program Files\\\\OpenSSL\\\\lib\\\\engines-1_1\""
    -DGHASH_ASM
    -DKECCAK1600_ASM
    -DL_ENDIAN
    -DMD5_ASM
    "-DOPENSSLDIR=\"C:\\\\Program Files\\\\Common Files\\\\SSL\""
    -DOPENSSL_BN_ASM_GF2m
    -DOPENSSL_BN_ASM_MONT
    -DOPENSSL_BN_ASM_MONT5
    -DOPENSSL_CPUID_OBJ
    -DOPENSSL_IA32_SSE2
    -DOPENSSL_PIC
    -DPOLY1305_ASM
    -DRC4_ASM
    -DSHA1_ASM
    -DSHA256_ASM
    -DSHA512_ASM
    -DVPAES_ASM
    -DX25519_ASM
)
set(include_dirs_1
    ${CMAKE_CURRENT_BINARY_DIR}/crypto/ec/curve448
    ${CMAKE_CURRENT_BINARY_DIR}/crypto/ec/curve448/arch_32
    ${SOURCE_DIR}/crypto/ec/curve448
    ${SOURCE_DIR}/crypto/ec/curve448/arch_32
)
set(include_dirs_2
    ${CMAKE_CURRENT_BINARY_DIR}/crypto/modes
    ${SOURCE_DIR}/crypto/modes
)
set(include_dirs_3 ${CMAKE_CURRENT_BINARY_DIR}/crypto ${SOURCE_DIR}/crypto)
set(include_dirs_4 ${CMAKE_CURRENT_BINARY_DIR} ${SOURCE_DIR})
language_compile_options(C
    /Gs0
    /GF
    /Gy
    /MD$<$<CONFIG:Debug>:d>
    /W3
    /wd4090
    -DOPENSSL_SYS_WIN32
    -DWIN32_LEAN_AND_MEAN
    -DUNICODE
    -D_UNICODE
    -D_CRT_SECURE_NO_DEPRECATE
    -D_WINSOCK_DEPRECATED_NO_WARNINGS
    -DOPENSSL_USE_APPLINK
)
language_include_directories(C ${CMAKE_CURRENT_BINARY_DIR}/include ${SOURCE_DIR}/include)
language_compile_options(ASM_NASM -DNEAR)
link_libraries(ws2_32 crypt32)
executable_link_options(/subsystem:console /opt:ref)

set(copy_prebuilt_artifacts_DIR prebuilt)
set(copy_prebuilt_artifacts_DEST ${CMAKE_CURRENT_BINARY_DIR})
file(GLOB_RECURSE _files RELATIVE ${CMAKE_CURRENT_LIST_DIR}/${copy_prebuilt_artifacts_DIR} ${copy_prebuilt_artifacts_DIR}/*)
foreach(_f ${_files})
    configure_file(${copy_prebuilt_artifacts_DIR}/${_f} ${copy_prebuilt_artifacts_DEST}/${_f} COPYONLY)
endforeach()
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/crypto/ec/curve448/arch_32)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/crypto/ec/curve448)

set_source_files_properties(${SOURCE_DIR}/crypto/bn/bn_exp.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/cversion.c PROPERTIES INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR}/crypto)
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/arch_32/f_impl.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/curve448.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/curve448_tables.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/eddsa.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/f_generic.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/ec/curve448/scalar.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_1}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_aes.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2};${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_aes_cbc_hmac_sha1.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_aes_cbc_hmac_sha256.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_aria.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2};${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_camellia.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2};${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_des.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_des3.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/e_sm4.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2};${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/evp/m_sha3.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/modes/gcm128.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_3}")
set_source_files_properties(${SOURCE_DIR}/crypto/rand/drbg_ctr.c PROPERTIES INCLUDE_DIRECTORIES "${include_dirs_2}")
include(CRYPTO_STATIC_STATIC_SRC.cmake)
add_library(crypto_static.static STATIC ${CRYPTO_STATIC_STATIC_SRC})
target_language_compile_options(crypto_static.static C PRIVATE ${compile_flags_1})
target_language_include_directories(crypto_static.static C PRIVATE ${include_dirs_4})
set_target_properties(crypto_static.static PROPERTIES OUTPUT_NAME libcrypto_static)

include(CRYPTO-1_1-X64_SRC.cmake)
add_library(crypto-1_1-x64 SHARED ${CRYPTO-1_1-X64_SRC})
target_link_options(crypto-1_1-x64 PRIVATE /def:${CMAKE_CURRENT_BINARY_DIR}/libcrypto.def)
target_language_compile_options(crypto-1_1-x64 C PRIVATE ${compile_flags_1})
target_language_include_directories(crypto-1_1-x64 C PRIVATE ${include_dirs_4})
set_target_properties(crypto-1_1-x64 PROPERTIES OUTPUT_NAME libcrypto-1_1-x64)
set_target_properties(crypto-1_1-x64 PROPERTIES ARCHIVE_OUTPUT_NAME libcrypto)
set_target_properties(crypto-1_1-x64 PROPERTIES VERSION 1.1.1g)

include(SSL_STATIC_STATIC_SRC.cmake)
add_library(ssl_static.static STATIC ${SSL_STATIC_STATIC_SRC})
target_compile_options(ssl_static.static PRIVATE ${compile_flags_1})
target_include_directories(ssl_static.static PRIVATE ${include_dirs_4})
set_target_properties(ssl_static.static PROPERTIES OUTPUT_NAME libssl_static)

include(SSL-1_1-X64_SRC.cmake)
add_library(ssl-1_1-x64 SHARED ${SSL-1_1-X64_SRC})
target_link_options(ssl-1_1-x64 PRIVATE /def:${CMAKE_CURRENT_BINARY_DIR}/libssl.def)
target_link_libraries(ssl-1_1-x64 PRIVATE crypto-1_1-x64)
target_language_compile_options(ssl-1_1-x64 C PRIVATE ${compile_flags_1})
target_language_include_directories(ssl-1_1-x64 C PRIVATE ${include_dirs_4})
set_target_properties(ssl-1_1-x64 PROPERTIES OUTPUT_NAME libssl-1_1-x64)
set_target_properties(ssl-1_1-x64 PROPERTIES ARCHIVE_OUTPUT_NAME libssl)
set_target_properties(ssl-1_1-x64 PROPERTIES VERSION 1.1.1g)

add_library(apps.static STATIC
    ${SOURCE_DIR}/apps/app_rand.c
    ${SOURCE_DIR}/apps/apps.c
    ${SOURCE_DIR}/apps/bf_prefix.c
    ${SOURCE_DIR}/apps/opt.c
    ${SOURCE_DIR}/apps/s_cb.c
    ${SOURCE_DIR}/apps/s_socket.c
    ${SOURCE_DIR}/apps/win32_init.c
)
target_compile_options(apps.static PRIVATE ${compile_flags_1})
target_include_directories(apps.static PRIVATE ${include_dirs_4})
set_target_properties(apps.static PROPERTIES OUTPUT_NAME libapps)
set_target_output_subdir(apps.static ARCHIVE_OUTPUT_DIRECTORY apps)

set_source_files_properties(${SOURCE_DIR}/ms/applink.c PROPERTIES INCLUDE_DIRECTORIES ${SOURCE_DIR}/apps)
include(OPENSSL_SRC.cmake)
add_executable(openssl ${OPENSSL_SRC})
target_link_options(openssl PRIVATE setargv.obj)
target_link_libraries(openssl PRIVATE apps.static ssl-1_1-x64 crypto-1_1-x64)
target_language_include_directories(openssl C PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/apps ${include_dirs_4})
set_target_output_subdir(openssl RUNTIME_OUTPUT_DIRECTORY apps)
set_target_properties(openssl PROPERTIES VERSION 1.1.1g)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test)

add_library(testutil.static STATIC
    ${SOURCE_DIR}/test/testutil/basic_output.c
    ${SOURCE_DIR}/test/testutil/cb.c
    ${SOURCE_DIR}/test/testutil/driver.c
    ${SOURCE_DIR}/test/testutil/format_output.c
    ${SOURCE_DIR}/test/testutil/main.c
    ${SOURCE_DIR}/test/testutil/output_helpers.c
    ${SOURCE_DIR}/test/testutil/random.c
    ${SOURCE_DIR}/test/testutil/stanza.c
    ${SOURCE_DIR}/test/testutil/tap_bio.c
    ${SOURCE_DIR}/test/testutil/test_cleanup.c
    ${SOURCE_DIR}/test/testutil/tests.c
    ${SOURCE_DIR}/test/testutil/testutil_init.c
)
target_compile_options(testutil.static PRIVATE ${compile_flags_1})
set_target_properties(testutil.static PROPERTIES OUTPUT_NAME libtestutil)
set_target_output_subdir(testutil.static ARCHIVE_OUTPUT_DIRECTORY test)

add_executable(asn1_decode_test ${SOURCE_DIR}/test/asn1_decode_test.c)
target_link_options(asn1_decode_test PRIVATE setargv.obj)
target_link_libraries(asn1_decode_test PRIVATE testutil.static crypto-1_1-x64)
set_target_output_subdir(asn1_decode_test RUNTIME_OUTPUT_DIRECTORY test)

add_executable(x509_time_test ${SOURCE_DIR}/test/x509_time_test.c)
target_link_options(x509_time_test PRIVATE setargv.obj)
target_link_libraries(x509_time_test PRIVATE testutil.static crypto-1_1-x64)
set_target_output_subdir(x509_time_test RUNTIME_OUTPUT_DIRECTORY test)
